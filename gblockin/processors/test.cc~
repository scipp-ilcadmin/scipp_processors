#undef _GLIBCXX_USE_CXX11_ABI
#define _GLIBCXX_USE_CXX11_ABI 0
/*
 * test.cc
 * @author Gregory Blockinger
 */


#include "test.h"
#include "scipp_ilc_utilities.h"
#include <iostream>

#include <EVENT/LCCollection.h>
#include <EVENT/SimCalorimeterHit.h>
#include <EVENT/MCParticle.h>

#include <TFile.h>
#include <TH2D.h>

// ----- include for verbosity dependend logging ---------
#include "marlin/VerbosityLevels.h"


using namespace lcio;
using namespace marlin;
using namespace std;

static TFile* _rootfile;
static TH1F* _histo;
static TH2F* _plot;
static int _nEvt=0;


test test;

test::test() : Processor("test")
{
  _description = "Occupancy Analysis Processor";

  //  registerInputCollection( LCIO::MCPARTICLE, "CollectionName", "Name of MCPArticle collection", _mccolName, std::string("NoCLUE_MCPART"));
  registerInputCollection(LCIO::SIMCALORIMETERHIT, "SimCalorimeterHits", "BeamCalHits", _bcolName, std::string("NoCLUE_BCALLHOPEFULLY"));
}

void test::check(LCEvent *evt) 
{
  //nothing here could be used to fill checkplots in rconstruction processor
}

void test::processRunHeader(LCRunHeader *run)
{

}

void  test::init()
{
  
}

void test::end()
{

}

void test::processEvent(LCEvent* evt)
{
  cout << evt->getRunNumber() << endl;
  cout << evt->getEventNumber() << endl;
  cout << evt->getDetectorName() << endl;
  cout << evt->getTimeStamp() << endl;
  cout << evt->getWeight() << endl;
  cout << evt->getCollectionNames() << endl;
  //  cout << evt->getCollection() << endl;
  //  cout << evt->getParameters() << endl;

  //  this->bcalLoop(evt);
}

/*void test::bcalLoop(LCEvent *evt)
{
  float bcalEnergySum = 0;
  LCCollection* bcalCol;
  try 
  {
    bcalCol = evt->getCollection ( _bcolName );
    int noBcalHits = bcalCol->getNumberOfElements();
    cout << noBcalHits << endl;
    for (int i=0; i < noBcalHits; ++i)
    {
      SimCalorimeterHit *bcalHit = dynamic_cast<SimCalorimeterHit*>(bcalCol->getElementAt(i));
      float energy = bcalHit->getEnergy();
      bcalEnergySum += energy;
      cout << "here " << i << endl;
    }
  }
  catch (DataNotAvailableException err)
  {
    cout << "you erred out boi" << endl;
  }
*/
