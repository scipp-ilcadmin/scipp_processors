#undef _GLIBCXX_USE_CXX11_ABI
#define _GLIBCXX_USE_CXX11_ABI 0
/* 
 * Ok, so I like C++11. Unfortunately,
 * Marlin is built with ansi C, so the processor
 * constructor freaks out about the string that is
 * passed to it as an argument. The above two lines
 * fix that issue, allowing our code to be compatible
 * with ansi C class declarations.
 * Big thanks to Daniel Bittman for helping me fix this.
 */

/*
 * author Christopher Milke
 * April 5, 2016
 */

#include "first.h"
#include "scipp_ilc_utilities.h"
#include <iostream>

#include <EVENT/LCCollection.h>
#include <EVENT/SimCalorimeterHit.h>
#include <EVENT/MCParticle.h>

#include <TFile.h>
#include <TH2D.h>

// ----- include for verbosity dependend logging ---------
#include "marlin/VerbosityLevels.h"
#include "util.h"


using namespace lcio;
using namespace marlin;
using namespace std;


first first;

static TFile* _rootfile;
static TH2F* _hitmap1;
static TH2F* _hitmap2;
static TH2F* _hitmap3;
static TH2F* _hitmap4;

static TH2F* _e_hitmap;
static TH2F* _p_hitmap;

static TH1F* _hitmiss;

static int hit = 0;
static int miss = 0;
static int hh = 0;
static int hm = 0;
static int mh = 0;
static int mm = 0;

//static TH1F* _energy;
static TH1F* _phi_hh;
static TH1F* _phi_mm;
static TH1F* _phi_hm;
static TH1F* _phi_mh;
static TH2F* _hh;
static TH2F* _mm;
static TH2F* _hm;

class Bundle{
public:
  //Verbose is mostly unused.
  const bool VERBOSE = false;
  //Setting PDG constants to particle names
  const int PHOTON = 22;
  const int POSITRON = 11;
  const int ELECTRON = -11;

  //Setting errors static so I can spell check them easily. Mostly unused, I though Bhabhas were going do be a larger project.
  const string ERROR_NOT_BAHBAH_PARTICLE = "Not a Bahbah particle User-Error: Trying to add a particle that is not accounted for.";
  const string ERROR_MAX_PHOTONS = "Max Photon User-Error: Trying to add photon but it is already full.";
  const string ERROR_ALREADY_PARTICLE = "Particle Already There User-Error: Trying to add a paticle but the space is not NULL.";

  bool init = false;

  int info = 0;

  MCParticle* photonA = NULL;
  MCParticle* photonB = NULL;
  MCParticle* positron = NULL;
  MCParticle* electron = NULL;
  MCParticle* photons[2] = {NULL, NULL};

  static bha::HitMissStore positronStore;
  static bha::HitMissStore electronStore;

  //Constuctor to make positron and electron NULL. I think this can be removed.
  Bundle(){
    positron = NULL;
    electron = NULL;
  }

  //Do a check to see if it is ready, then orchestrates other functions.
  void initialize();

  //Calculate and process hh, hm, mh, mm.
  void init_hitmap(bool=true);

  //Used to calculate and plot the colinearity
  double get_colinearity(bool=true);


  //Python-like printing function, because I love python.
  void print(string _input);

  //This function is written to plot hit statuses
  void graphHitStatus(const double*, int id, bool=true);

  //Returns the total number of particles added. MAX is 4 right now.
  int getCount();

  //Checks to see if particle is already there, then adds it for processing. Once full it runs initialize.
  void addParticle(MCParticle* _input);

  //Preparing for updating class for n photons. Currently max is 2 photons.
  void addPhoton(MCParticle* _input);

  //Returns associated particle.
  MCParticle* getElectron();
  MCParticle* getPositron();

  //-- Physics Section --\\
  //returns the angle from the x-y axis
  double getPhi(MCParticle* _input);

  //returns the angle from the z axis
  double getTheta(MCParticle* _input,bool);

  //Gets the norm of the vector and finds it's manitude.
  double getMagnitude(MCParticle* _input);

  //Retuns the magnitude of the dot-product.
  double getDotProduct(MCParticle* A, MCParticle* B);

  //returns the lab-momentum of the particle as an array => {0: x-axis, 1: y-axis, 2: z-axis}
  double* getMomentum(MCParticle* _input, bool=true);
};


first::first() : Processor("first") {
    // modify processor description
    _description = "Protype Processor" ;

    // register steering parameters: name, description, class-variable, default value
    registerInputCollection( LCIO::MCPARTICLE, "CollectionName" , "Name of the MCParticle collection"  , _colName , std::string("MCParticle") );

    registerProcessorParameter( "RootOutputName" , "output file"  , _root_file_name , std::string("output.root") );
}


void first::init() { 
    streamlog_out(DEBUG) << "   init called  " << std::endl ;
    cout << "Initialized" << endl;
    _rootfile = new TFile("Phi_Bhabha.root","RECREATE");
    //These initialization are here as reference until I finish rewriting all the code.
    //    _energy = new TH1F("energy", "Energy", 520.0,  0.0, 260.0);
    /*    _hitmiss = new TH1F("hm", "Hit Miss Ratio", 5, -1, 2);
    _hitmap1 = new TH2F("pos1", "Position Distribution On Beamcal", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    _hitmap2 = new TH2F("pos2", "Position Distribution On Beamcal", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    _hitmap3 = new TH2F("pos3", "Position Distribution On Beamcal", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);nn
    _hitmap4 = new TH2F("pos4", "Position Distribution On Beamcal", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    //    static TH2F* _e_hitmap;

    //    _hitmap4 = new TH2F("pos4", "Position Distribution On Beamcal", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    //    _theta1 = new TH1F("theta_s", "Angle Difference (Electron - Positron) From 0-2π", 500, 0, 6.28);
    //    _theta2 = new TH1F("theta_m", "Angle Difference (Electron - Positron) From 1-π", 500, 1, 3.14);
    //    _theta3 = new TH1F("theta_t", "Angle Difference (Electron - Positron) From 0-1rad", 500, 0, .1);
    _cosE = new TH1F("electron_corth", "Cosine Theta Distribution For Electrons", 350, 0, 6.28);
    _cosP = new TH1F("positron_costh", "Cosine Theta Distribution For Positrons", 350, 0, 6.28);

    */

    _hh = new TH2F("hh", "Hit-Hit Distribution", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    _mm = new TH2F("mm", "Miss-Miss Distribution", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    _hm = new TH2F("hm", "Hit-Miss Distribution", 300.0, -150.0, 150.0, 300.0, -150.0, 150.0);
    _phi_hh = new TH1F("phi_hh", "Colinearity of Electron-Positron Using Dot Products: HH Theta Distribution", 350, 0, (3.1415));
    _phi_mm = new TH1F("phi_mm", "Colinearity of Electron-Positron Using Dot Products: MM Theta Distribution", 350, 0, (3.1415));
    _phi_hm = new TH1F("phi_hm", "Colinearity of Electron-Positron Using Dot Products: HM Theta Distribution", 350, 0, (3.1415));
    _phi_mh = new TH1F("phi_mh", "Colinearity of Electron-Positron Using Dot Products: MH Theta Distribution", 350, 0, (3.1415));
    //    hh=hm=mh=mm=0;
    //printParameters() ;
    _nEvt = 0 ;

    //Setting up Plots\\
    cout << "Vector allocated." << endl;
}



void first::processRunHeader( LCRunHeader* run) { 
//    _nRun++ ;
} 


void first::processEvent( LCEvent * evt ) { 
    LCCollection* col = evt->getCollection( _colName );
    //    cout << "NEW Event Started." << endl;
    Bundle* bundle = new Bundle; //Created a bundle to process the data for the bahbah event.

    int stat, id =0;
    if( col != NULL ){
        int nElements = col->getNumberOfElements()  ;
        for(int hitIndex = 0; hitIndex < nElements ; hitIndex++){
           MCParticle* hit = dynamic_cast<MCParticle*>( col->getElementAt(hitIndex) );        
            id = hit->getPDG();
            stat = hit->getGeneratorStatus();
            if(stat==1){
	      //hit is an end particle:
	      bundle->addParticle(hit); //The bundle object has the rest of the processing.
	      bundle->initialize();
            }//end final state   
        }//end for
    }
    delete bundle; //Critical while bundle is a pointer. ( Does it matter if it is a pointer? )
    _nEvt ++ ;
}



void first::check( LCEvent * evt ) { 
    // nothing to check here - could be used to fill checkplots in reconstruction processor
}



void first::end(){ 
  //  cout << "\n Hits: " << hit << endl;
  //  cout << " Miss: " << miss << endl;
  cout << " HH: " << hh << endl;
  cout << " MM: " << mm << endl;
  cout << " HM: " << hm << endl;
  cout << " MH: " << mh << endl;
  _rootfile->Write();
}


//Implementation of the Bundle Class
void Bundle::initialize(){
  if(getPositron() == NULL || getElectron() == NULL)return;
  if(init++)return;
  init_hitmap();
  /*//CosineTheta Not doing center to mass frame.
  double cosE = cos(b->getTheta(b->getElectron(), true));
  double cosP = cos(b->getTheta(b->getPositron(), true));
  _cosE->Fill(cosE);
  _cosP->Fill(cosP);
  _cos->Fill(cosE);
  _cos->Fill(cosP);*/

}
void Bundle::init_hitmap(bool lab){
  if(lab){
    graphHitStatus(getMomentum(getElectron()), ELECTRON);
    graphHitStatus(getMomentum(getPositron()), POSITRON);
  }else{
    graphHitStatus(getElectron()->getMomentum(), ELECTRON);
    graphHitStatus(getPositron()->getMomentum(), POSITRON);
  }
}

void Bundle::graphHitStatus(const double*  momentum, int id, bool lab){
  double x = momentum[0];
  double y = momentum[1];
  switch(scipp_ilc::get_hitStatus(x, y)){
  case(1): //hit beamcal
    if(id == ELECTRON){
      info += 10;
    }else if(id==POSITRON){
      info += 100;
    }
    info += 1;
    break;
  case(2): //outside beamcal
    if(id == ELECTRON){
      info += 10;
    }else if(id==POSITRON){
      info += 100;
    }
    info += 1;
    break;
  case(3): //outgoing beampipe
    if(id == ELECTRON){
      info += 70;
    }else if(id==POSITRON){
      info += 700;
    }
    info += 1;
    break;
  case(4): //incoming beampipe
    if(id == ELECTRON){
      info += 70;
    }else if(id==POSITRON){
      info += 700;
    }
    info += 1;
    break;
  }
  //cout << "# " << info << endl;
  // 1=hit; 7=miss; positron>electron;
  if(info%10==2){
    // Electron-Positron
    // Hit-Hit
    if(info%100/10==1 && info%1000/100==1){ 
      electronStore.hit++;
      positronStore.hit++;
      electronStore.hh.push_back(getMomentum(getElectron(), lab));
      positronStore.hh.push_back(getMomentum(getPositron(), lab));
    }
    // Miss-Miss
    else if(info%100/10==7 && info%1000/100==7){
      electronStore.miss++;
      positronStore.miss++;
      electronStore.mm.push_back(getMomentum(getElectron(), lab));
      positronStore.mm.push_back(getMomentum(getPositron(), lab));
    }
    // Miss-Hit
    else if(info%100/10==7 && info%1000/100==1){
      electronStore.miss++;
      positronStore.hit++;
      electronStore.mh.push_back(getMomentum(getElectron(), lab));
      positronStore.mh.push_back(getMomentum(getPositron(), lab));
    }
    // Hit-Miss
    else if(info%100/10==1 && info%1000/100==7){
      electronStore.hit++;
      positronStore.miss++;
      electronStore.hm.push_back(getMomentum(getElectron(), lab));
      positronStore.hm.push_back(getMomentum(getPositron(), lab));
    }
  }
}

//Function used to calculate anglee difference using norms and phi to get theta.
void init_angleBetweenEP_1(){
  /*  //  Trial 1: Getting angle between electron and positron.
      double p_theta = getTheta(positron);
      double e_theta = getTheta(electron);
      double del_theta = p_theta-e_theta; 


  //  _hitmap->Fill(positron->getMomentum()[0], positron->getMomentum()[1]);
  //  _hitmap->Fill(electron->getMomentum()[0], electron->getMomentum()[1]);
  //  _theta1->Fill(del_theta);
  //  _theta2->Fill(del_theta);
  //  _theta3->Fill(del_theta);
  */
}

//Function used to calculate the angle difference (colinearity) using dot products.
double Bundle::get_colinearity(bool lab){
  //Getting angle between electron and positron using dot products.
  double dot   = getDotProduct(getPositron(), getElectron());
  double mag_B = getMagnitude( getElectron());
  double mag_A = getMagnitude( getPositron());
  double val = -dot/(mag_A*mag_B);
  double del_theta = acos(val); 
  return del_theta;
}

void Bundle::print(string _input){
  cout << _input << endl;
}

//-- Physics Section --\\
//returns the angle from the x-y axis
double Bundle::getPhi(MCParticle* _input){
  return atan(_input->getMomentum()[0]/_input->getMomentum()[1]);
}
//returns the angle from the z axis
double Bundle::getTheta(MCParticle* _input, bool lab = false){
  //Get the norm in the x,y plane:
  const double m_x = (_input->getMomentum())[0];
  const double m_y = (_input->getMomentum())[1];
  const double m_z = _input->getMomentum()[2];
  double p_x = m_x;
  if(lab){
    double energy = _input->getEnergy();
    scipp_ilc::transform_to_lab(p_x, energy, p_x, energy);
  }
  double norm = sqrt(p_x*p_x + m_y*m_y);
  double theta = atan(norm/m_z);

  //The norm in the opposite side, and the z axis is the same side.
  return theta;

}

//-- CompSci Section --\\

MCParticle* Bundle::getElectron(){
  //  if(electron == NULL)cout << "\nElectron is NUll\n";
  return electron;
}

MCParticle* Bundle::getPositron(){
  //  if(electron == NULL)cout << "\nPositron is NUll\n";
  return positron;
}


//Checks to see if particle is already there, then adds it for processing. Once full it runs initialize.
void Bundle::addParticle(MCParticle* _input){
  //  if(positron == NULL) cout << "pNULL" << endl;
  //  if(electron == NULL) cout << "eNULL" << endl;
  switch(_input->getPDG()){
  case(PHOTON):
    addPhoton(_input);
    break;
  case(POSITRON):
    if(positron == NULL){
      positron = _input;
    }else if(VERBOSE) print(ERROR_ALREADY_PARTICLE);
    break;
  case(ELECTRON):
    if(electron == NULL){
      electron = _input;
    }else if(VERBOSE)print(ERROR_ALREADY_PARTICLE);
    break;
  default:
    if(VERBOSE)print(ERROR_NOT_BAHBAH_PARTICLE);
  }
}
    
//Preparing for updating class for n photons. Currently max is 2 photons.
void Bundle::addPhoton(MCParticle* _input){
  if(photonA == NULL){
    photonA = _input;
    photons[0] = photonA;
  }else if(photonB ==NULL){
    photonB = _input;
    photons[1] = photonB;
  }else if(VERBOSE)print(ERROR_MAX_PHOTONS);
}

//Gets the norm of the vector and finds it's manitude.
double Bundle::getMagnitude(MCParticle* _input){
  double* m = getMomentum(_input);
  return sqrt(m[0]*m[0] + m[1]*m[1] + m[2]*m[2]);
}
double Bundle::getDotProduct(MCParticle* A, MCParticle* B){
  double* a = getMomentum(A);
  double* b = getMomentum(B);
  return (a[0]*b[0] + a[1]*b[1] + a[2]*b[2]);
}
double*  Bundle::getMomentum(MCParticle* _input, bool lab){
  double x = _input->getMomentum()[0];
  double y = _input->getMomentum()[1];
  double z = _input->getMomentum()[2];
  double e = _input->getEnergy();
  scipp_ilc::transform_to_lab(e,x,e,x);
  return new double[3]{x,y,z};
}
