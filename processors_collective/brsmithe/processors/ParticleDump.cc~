#undef _GLIBCXX_USE_CXX11_ABI
#define _GLIBCXX_USE_CXX11_ABI 0
/* 
 * Ok, so I like C++11. Unfortunately,
 * Marlin is built with ansi C, so the processor
 * constructor freaks out about the string that is
 * passed to it as an argument. The above two lines
 * fix that issue, allowing our code to be compatible
 * with ansi C class declarations.
 * Big thanks to Daniel Bittman for helping me fix this.
 */

/*
 * author Jane Shtalenkovae
 * August 5, 2016
 */

#include "ParticleDump.h"
#include "scipp_ilc_utilities.h"
#include "scipp_ilc_globals.h"
#include "polar_coords.h"
#include <iostream>
#include <cmath>

#include <EVENT/LCCollection.h>
#include <EVENT/SimCalorimeterHit.h>

#include <TFile.h>
#include <TH2D.h>

// ----- include for verbosity dependend logging ---------
#include "marlin/VerbosityLevels.h"



using namespace lcio;
using namespace marlin;
using namespace std;

ParticleDump ParticleDump;

static TFile* _rootfile;

static TH2F* _Pmom;
static TH2F* _Emom;

//static TH2F* _hitmap
static TH1F* _endpoints;
static TH2F* _hitmap;

static TH1F* _xSum;
static TH1F* _ySum;

static TH1F* _ecount;
static TH1F* _pcount;

ParticleDump::ParticleDump() : Processor("ParticleDump") {
    // modify processor description
    _description = "Protype Processor" ;

    // register steering parameters: name, description, class-variable, default value
    registerInputCollection( LCIO::MCPARTICLE, "CollectionName" , "Name of the MCParticle collection"  , _colName , std::string("MCParticle") );
}



void ParticleDump::init() { 
    streamlog_out(DEBUG) << "   init called  " << std::endl ;

    _rootfile = new TFile("ParticleDump.root","RECREATE");
    _Pmom = new TH2F("Pmom", "Positron XY momentums", 2000.0, -200.0, 200.0, 2000.0, -200.0, 200.0);
    _Emom = new TH2F("Emom", "Electron XY momentums", 2000.0, -200.0, 200.0, 2000.0, -200.0, 200.0);
    _endpoints = new TH1F("endpoints", "Endpoint Distribution", 4000.0, -2000.0, 2000.0);
    _hitmap = new TH2F("hitmap", "Hit Distribution", 200.0, -10.0, 10.0, 200.0, -10.0, 10.0);
    
    _ecount = new TH1F("ecount","Electron Count per Event", 11.0, 0.0, 10.0);
    _pcount = new TH1F("pcount","Positron Count per Event", 11.0, 0.0, 10.0);


    // usually a good idea to
    //printParameters() ;

    _nRun = 0 ;
    _nEvt = 0;

}



void ParticleDump::processRunHeader( LCRunHeader* run) { 
//    _nRun++ ;
} 


void ParticleDump::processEvent( LCEvent * evt ) { 
    // this gets called for every event 
    // usually the working horse ...


    LCCollection* col = evt->getCollection( _colName ) ;

    
    double scatter_vec[] = {0, 0, 0};
    double energy = 0;
    double theta;
    int id, stat;
    
    const double* mom;
    
    const bool onlyleptons = true;

    bool leftDetector;
    
    double Zero = 0.000000001;

    bool NOTuseGenSt = false;


    int ecount=0;
    int pcount=0;

    // this will only be entered if the collection is available
    if( col != NULL ){
        int nElements = col->getNumberOfElements()  ;
	ecount = 0;
	pcount = 0;
     
	
        //first, find last electron and positron in the event
        for(int hitIndex = 0; hitIndex < nElements ; hitIndex++){
           MCParticle* hit = dynamic_cast<MCParticle*>( col->getElementAt(hitIndex) );
    
           id = hit->getPDG(); 
           stat = hit->getGeneratorStatus();

           if(stat==1 || NOTuseGenSt){
	     
	     mom = hit->getMomentum();
	     energy = hit->getEnergy();

	     switch(id){
	     case 11:
	       //cout << "Electron has momentum (" << mom[0] << ", " << mom[1] << ", " << mom[2] << ")" <<  endl;
	       ecount++;
	       _Emom->Fill(mom[0],mom[1]);
	       break;
	     case -11:
	       //cout << "Positron has momentum (" << mom[0] << ", " << mom[2] << ", " << mom[2] << ")"  << endl;
	       pcount++;
	       _Pmom->Fill(mom[0],mom[1]);
	     default:
	       break;
	       
	     }//End switch
	   }//end final state
	   
	   
        }//end for loop
        
	_ecount->Fill(ecount);
	_pcount->Fill(pcount);

    }//end collection
    //cout << "Event end" << endl;
    _nEvt ++ ;
}//end process



void ParticleDump::check( LCEvent * evt ) { 
    // nothing to check here - could be used to fill checkplots in reconstruction processor
}



void ParticleDump::end(){
    _rootfile->Write();
    cout << "End" << endl;
}


