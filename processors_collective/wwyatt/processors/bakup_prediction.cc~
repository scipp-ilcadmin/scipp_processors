#undef _GLIBCXX_USE_CXX11_ABI
#define _GLIBCXX_USE_CXX11_ABI 0
/* 
 * Ok, so I like C++11. Unfortunately,
 * Marlin is built with ansi C, so the processor
 * constructor freaks out about the string that is
 * passed to it as an argument. The above two lines
 * fix that issue, allowing our code to be compatible
 * with ansi C class declarations.
 * Big thanks to Daniel Bittman for helping me fix this.
 */

/*
 * author Christopher Milke
 * April 5, 2016
 */

#include "Prediction.h"
#include "scipp_ilc_utilities.h"
#include <iostream>

#include <EVENT/LCCollection.h>
#include <EVENT/SimCalorimeterHit.h>
#include <EVENT/MCParticle.h>

#include <TFile.h>
#include <TH2D.h>
#include <MyParticle.h>
// ----- include for verbosity dependend logging ---------
#include "marlin/VerbosityLevels.h"



using namespace lcio;
using namespace marlin;
using namespace std;


Prediction Prediction;

static TFile* _rootfile;
static TH2F* _prediction;
static TH1F* _vector;
static TH1F* _p_theta;
static TH1F* _e_theta;


Prediction::Prediction() : Processor("Prediction") {
    // modify processor description
    _description = "Protype Processor" ;

    // register steering parameters: name, description, class-variable, default value
    registerInputCollection( LCIO::MCPARTICLE, "CollectionName" , "Name of the MCParticle collection"  , _colName , std::string("MCParticle") );

    registerProcessorParameter( "RootOutputName" , "output file"  , _root_file_name , std::string("output.root") );
}



void Prediction::init() { 
    streamlog_out(DEBUG) << "   init called  " << std::endl ;

    _rootfile = new TFile("WB_prediction.root","RECREATE");
    // usually a good idea to
    //printParameters() ;
    _prediction = new TH2F("predict", "Predicted Angle of Scatter, Correct vs Incorrect Kinematics", 1000, 0.0, 0.01, 1000, 0.0, 0.01);
    _p_theta = new TH1F("p_theta", "Theta between positron and hadronic system", 360, 0, 3.5);
    _e_theta = new TH1F("e_theta", "Theta between positron and hadronic system", 360, 0, 3.5);
    _vector = new TH1F("vector", "Vector", 200, 0.0, 0.05);
    _nEvt = 0 ;

}



void Prediction::processRunHeader( LCRunHeader* run) { 
//    _nRun++ ;
} 



void Prediction::processEvent( LCEvent * evt ) { 
    LCCollection* col = evt->getCollection( _colName ) ;
    _nEvt++;
    if( col == NULL )return;
    vector<MCParticle*> final_system;
    int stat, id =0;
    double tot_mom[]={0, 0};
    double compEn_e=0, compEn_p=0;
    double mom[4];
    double mom_e[4];
    double mom_p[4];
    double tmom, theta, good_t, bad_t, mag, eT, pT;
    bool scatter;
    double hadronic[] = {0, 0, 0, 0};
    double electronic[] = {0, 0, 0, 0};

    int nElements = col->getNumberOfElements();
    scatter = false;
    for(int hitIndex = 0; hitIndex < nElements ; hitIndex++){
      //cast to MCParticle
      MCParticle* particle = dynamic_cast<MCParticle*>( col->getElementAt(hitIndex) );
      id = particle->getPDG();
      stat = particle->getGeneratorStatus();
      //cut on final state
      if(stat==1){
	//add to particle vector
	final_system.push_back(particle); 
	//find highest energy electron and positron
	if(id==11){
	  if(particle->getEnergy() > compEn_e){compEn_e=particle->getEnergy();}    
	}
	else if(id==-11){
	  if(particle->getEnergy() > compEn_p){compEn_p=particle->getEnergy();}    
	}
      }
    }
    //cout << endl;

    //Checks for scatter in electron or positron.
    for(MCParticle* particle : final_system){
      id = particle->getPDG();
      if(particle->getEnergy()==compEn_e){
	//ELECTRON
	mom_e[0]=particle->getMomentum()[0];    
	mom_e[1]=particle->getMomentum()[1];    
	mom_e[2]=particle->getMomentum()[2];
	mom_e[3]=particle->getEnergy();
	eT = sqrt(pow(mom_e[0], 2)+pow(mom_e[1], 2));

	if(abs(mom_e[0])!=0||abs(mom_e[1])!=0){
	  scatter = true;
	  electronic[0]+=mom_e[0];    
	  electronic[1]+=mom_e[1];    
	  electronic[2]+=mom_e[2];    
	  electronic[3]+=mom_e[3];    
	}
      }else if(particle->getEnergy()==compEn_p){
	//POSITRON
	mom_p[0]=particle->getMomentum()[0];    
	mom_p[1]=particle->getMomentum()[1];    
	mom_p[2]=particle->getMomentum()[2];
	mom_p[3]=particle->getEnergy();
	pT = sqrt(pow(mom_p[0], 2)+pow(mom_p[1], 2));

	if(abs(mom_p[0])!=0||abs(mom_p[1])!=0){
	  scatter = true;
	  electronic[0]+=mom_p[0];    
	  electronic[1]+=mom_p[1];    
	  electronic[2]+=mom_p[2];    
	  electronic[3]+=mom_p[3];    
	}    
      }else{
	//HADRONIC
	mom[0]=particle->getMomentum()[0];    
	mom[1]=particle->getMomentum()[1];    
	mom[2]=particle->getMomentum()[2];
	mom[3]=particle->getEnergy();
	hadronic[0]+=mom[0];    
	hadronic[1]+=mom[1];    
	hadronic[2]+=mom[2];    
	hadronic[3]+=mom[3];    
	double tmag = sqrt(pow(mom[0], 2)+pow(mom[1], 2));
	mag+=tmag;
      }
    }
    if(scatter == true){
      //create prediction vector
      double predict[4];
      predict[0] = -hadronic[0];
      predict[1] = -hadronic[1];
      double alpha = 500 - hadronic[3] - hadronic[2];
      double beta = 500 - hadronic[3] + hadronic[2];
      

      //Given positron deflection (eBpW)
      //incorrect prediction (correct if electron deflection)
      predict[2] = -(pow(eT, 2)-pow(alpha, 2))/(2*alpha);
      //correct prediction (correct if positron deflection)
      predict[3] = (pow(pT, 2)-pow(beta, 2))/(2*beta);
      
      //Hadron transverse momentum
      double r = sqrt(pow(predict[0], 2)+pow(predict[1], 2));
      
      
      double mag_g = sqrt(pow(predict[0], 2)+pow(predict[1], 2)+pow(predict[3], 2));
      good_t = asin(r/mag_g);

      double mag_b = sqrt(pow(predict[0], 2)+pow(predict[1], 2)+pow(predict[2], 2));
      bad_t = asin(r/mag_b);
            
      if(mag>1.0){
	_prediction->Fill(bad_t, good_t);
      }
      //cout << "Electronic Vector: [" << electronic[0] << ", " << electronic[1] << ", " << electronic[2] << "]" << endl;
      //cout << "Prediction Vector: [" << predict[0] << ", " << predict[1] << ", " << predict[2] << "]" << endl;
      
      //idk what this dot product is.
      //q_x*h_x + q_y*h_y + q_z*p_z (positron deflection dot product)
      double dot_c = electronic[0]*predict[0] + electronic[1]*predict[1] + electronic[2]*predict[3]; //Correct dot
      double dot_i = electronic[0]*predict[0] + electronic[1]*predict[1] + electronic[2]*predict[2]; //Incorrect dot
      double e_mag = sqrt(pow(electronic[0], 2)+pow(electronic[1], 2)+pow(electronic[2], 2)); 
      double p_mag_c = sqrt(pow(predict[0], 2)+pow(predict[1], 2)+pow(predict[3], 2)); //Correct mag
      double p_mag_i = sqrt(pow(predict[0], 2)+pow(predict[1], 2)+pow(predict[3], 2)); //Incorrect mag

      double theta_c = acos(dot_c/(e_mag*p_mag_c)); //Correct prediction
      double theta_i = acos(dot_i/(e_mag*p_mag_i)); //Incorrect prediction
      _p_theta->Fill(theta_c);
      _e_theta->Fill(theta_i);
      //theta = acos(dot/(e_mag*p_mag)); 

      //cout << "Prediction Efficiency :" <<  theta << endl;
    }
}

void Prediction::check( LCEvent * evt ) { 
    // nothing to check here - could be used to fill checkplots in reconstruction processor
}



void Prediction::end(){ 
    cout << interest << endl;
    _rootfile->Write();
}
