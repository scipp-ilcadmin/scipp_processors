#include <Will.h>
#include "scipp_ilc_globals.h"
#include <sstream>
using namespace Will;
fourvec fourvec::operator+(const fourvec& a) const{
  return fourvec(
		 a.x+x,
		 a.y+y,
		 a.z+z,
		 a.e+e,
		 sqrt(pow(a.x+x,2)+pow(a.y+y,2))
		 );
}
double fourvec::operator*(const fourvec& a) const{
  return a.x*x + a.y*y + a.z*z;
}
fourvec fourvec::operator*(const double a) const{
  return fourvec(a*x,a*y,a*z);
}

fourvec fourvec::operator*=(const double a){
  this->x=this->x*a;
  this->y=this->y*a;
  this->z=this->z*a;
  this->e=this->e*a;
  this->t=this->t*a;
  return *this;
}
fourvec fourvec::operator*=(const fourvec& a){
  this->x=this->x*a.x;
  this->y=this->y*a.y;
  this->z=this->z*a.z;
  this->e=this->e*a.e;
  this->t=this->t*a.t;
  return *this;
}
fourvec fourvec::operator/=(const double a){
  this->x=this->x/a;
  this->y=this->y/a;
  this->z=this->z/a;
  this->e=this->e/a;
  this->t=this->t/a;
  return *this;
}
fourvec fourvec::operator/(const double a) const{
  return fourvec(a/(*this).x,a/(*this).y,a/(*this).z);
}

fourvec fourvec::operator+=(const fourvec& a){
  *this = *this+a;
  return *this;
}
/*string Will::str(fourvec in){
  ostringstream strs;
  strs << in.x;
  string x_str = strs.str();
  strs.str(string());
  strs << in.y;
  string y_str=strs.str();
  strs.str(string());
  strs << in.z;
  string z_str=strs.str();
  return "x:y:z " + x_str +":"+ y_str +":"+ z_str + " ";
  }*/


fourvec::fourvec(const double _x,const double _y){x=_x;y=_y;t=getTMag(new double[2]{_x,_y});}
fourvec::fourvec(const double _x,const double _y,const double _z):fourvec(_x,_y){z=_z;}
fourvec::fourvec(const double _x,const double _y,const double _z,const double _e):fourvec(_x,_y,_z){e=_e;}
fourvec::fourvec(const double _x,const double _y,const double _z,const double _e,const double _t):fourvec(_x,_y,_z,_e){t=_t;}
fourvec::fourvec():fourvec(0,0,0,0,0){}
fourvec::fourvec(const double* input,const unsigned short SIZE){
  switch(SIZE){
  case 4:
    e=input[3];
  case 3:
    z=input[2];
  case 2:
    t=getTMag(new double[2]{input[0], input[1]});
    y=input[1];
  case 1:
    x=input[0];
  }
}

prediction::prediction(double x,double y){
  electron.x=x;
  positron.y=y;
}
prediction::prediction(measure input){
  alpha=(500-input.hadronic.E - input.hadronic.z);
  beta=(500-input.hadronic.E + input.hadronic.z);
  electron.x = -input.hadronic.x;
  electron.y = -input.hadronic.y;
  electron.z = -(pow(input.electron.T, 2)-pow(alpha, 2))/(2*alpha);
  electron.e = 500 - input.hadronic.e - electron.z - input.hadronic.z;
  electron.t = getTMag(electron);

  positron.x = -input.hadronic.x;
  positron.y = -input.hadronic.y;
  positron.z = (pow(input.positron.T, 2)-pow(beta, 2))/(2*beta);
  if (false && beta > 0){
    cout << input.hadronic.z << endl;
  }
  positron.e = 500 - input.hadronic.e + positron.z + input.hadronic.z;
  positron.t = getTMag(positron);
}



map<int, double> Will::maxEnergy(LCCollection* col, initializer_list<int> ids, vector<MCParticle*>& fs){
  const int SIZE=ids.size();
  //double* max=new double[SIZE];
  map<int, double>* max=new map<int,double>;
  //  map<int, int> max_id;
  for(int i=0; i < col->getNumberOfElements(); ++i){
    MCParticle* particle=dynamic_cast<MCParticle*>(col->getElementAt(i));
    if(particle->getGeneratorStatus()!=1)continue;
    fs.push_back(particle);
    int pid=particle->getPDG();
    for(auto id:ids){
      if(pid==id && particle->getEnergy() > (*max)[id]){
	(*max)[id]=particle->getEnergy();
      }
    }
  }
  return *max;
}

map<int,MCParticle*> Will::maxParticle(LCCollection* col, initializer_list<int> ids){
  const int SIZE=ids.size();
  map<int, MCParticle*>max;
  //map<int, int> max_id;
  for(int i=0; i < col->getNumberOfElements(); ++i){
    MCParticle* particle=dynamic_cast<MCParticle*>(col->getElementAt(i));
    if(particle->getGeneratorStatus()!=1)continue;
    int pid=particle->getPDG();
    for(auto id:ids){
      if(pid!=id)continue;
      double energy=0.0;
      if(max[id]==NULL) max[id]=particle;
      else energy=max[id]->getEnergy();
      if(particle->getEnergy()>energy) max[id]=particle;
    }
  }
  return max;
}

double* Will::getVector(MCParticle* particle){
  double* output=new double[4];
  const double* mom=particle->getMomentum();
  output[0]=mom[0];
  output[1]=mom[1];
  output[2]=mom[2];
  output[3]=particle->getEnergy();
  return output;
}

fourvec Will::getFourVector(MCParticle* particle){
  fourvec* output=new fourvec;
  const double* mom=particle->getMomentum();
  output->x=mom[0];
  output->y=mom[1];
  output->z=mom[2];
  output->E=particle->getEnergy();
  output->T=getTMag(mom);
  return *output;
}

  
double* Will::addVector(double* a, double* b, const int SIZE){
  double* output=new double[SIZE];
  for(int i=0; i<SIZE; ++i) output[i]=a[i]+b[i];
  return output;
}


double Will::getTMag(const double* input){
  return sqrt(pow(input[0], 2) + pow(input[1], 2));
}
double Will::getMag(const double* input){
  return sqrt(pow(input[0], 2) + pow(input[1], 2) + pow(input[2],2));
}

double Will::getTMag(fourvec input){
  input.T = sqrt(pow(input.x, 2) + pow(input.y, 2));
  return input.T;
}
double Will::getMag(fourvec input){
  return getMag(new double[3]{input.x,input.y,input.z});
}

double Will::getTheta(const double* input){
  return asin(getTMag(input)/getMag(input));
}
double Will::getTheta(fourvec input){
  return asin(getTMag(input)/getMag(input));
}

double Will::getDot(const double* a, const double* b){
  return getDot(fourvec(a,3),fourvec(b,3));
}
double Will::getDot(fourvec a, fourvec b){
  return a*b;
}

double Will::getTheta(const double* a, const double* b){
  return getTheta(fourvec(a,3),fourvec(b,3));
}
double Will::getTheta(fourvec a, fourvec b){
  return acos( a*b / (getMag(a)*getMag(b)) );
}

measure Will::getMeasure(LCCollection* col){
  measure out;
  vector<MCParticle*> all_particles;
  vector<MCParticle*> hadronic_system;

  map<int, double> max=maxEnergy(col, {11, -11}, all_particles);
  /* Max energy is a big function. It finds the max energy of the given particle ids.
   * The sketchy thing I did was have it return a vector with final state particles (genStat==1)
   * That is what the all_particles thing is.
   */
  int hits = 0;
  out.mag=0;
  //Checks for scatter in electron or positron.
  for(auto particle: all_particles){
    if(particle->getGeneratorStatus()!=1) continue; //Redundant, maxEnergy does this.
    int id = particle->getPDG();
    if(particle->getEnergy()==max[11]){
      ++hits;
      //ELECTRON
      out.electron=getFourVector(particle);
      if(out.electron.T!=0.0){
	out.e_scatter=out.scattered=true;
	out.electronic=out.electron;
      }
    }else if(particle->getEnergy()==max[-11]){
      ++hits;
      //POSITRON
      out.positron=getFourVector(particle);
      if(out.positron.T!=0.0){
	out.p_scatter=out.scattered=true;
	out.electronic=out.positron;
      }    
    }else{
      //HADRONIC
      fourvec hadron=getFourVector(particle);
      hadronic_system.push_back(particle);
      out.hadronic+=hadron;
      out.mag += getTMag(hadron);
    }
  }
  out.hadronic_nopseudo=out.hadronic;
  if(out.scattered){
    //PSEUDO PARTICLE
    out.pseudo=*(new fourvec(
		       -(out.hadronic.x+out.electronic.x),
		       -(out.hadronic.y+out.electronic.y) ));
    out.hadronic.x=0;
    out.hadronic.y=0;
    double total_energy=out.hadronic.E;
    out.hadronic.z=0;
    out.hadronic.e=0;
    out.hadronic.t=0;
    int count = 0;
    short n_hadrons = hadronic_system.size();
    out.mag += getTMag(out.pseudo);    
    //out.pseudo /= n_hadrons;
    for(auto particle: hadronic_system){
      fourvec hadron = getFourVector(particle);
      const double angle = 0.5; //Cutting angle
      if(true || abs(hadron.z/getMag(hadron)) < angle ){
	++count;
	//cout << "W iter : "<< getMag(out.hadronic) << endl;
	out.hadronic += (hadron+=out.pseudo*(hadron.E/total_energy));
	//out.hadronic += hadron;
      }
    }
    //cout << "W count : " << count << endl;
    //out.hadronic+=out.pseudo;
    
  }
  //if (out.scattered) cout << "will " << out.hadronic.e << " : " << out.hadronic.z << endl;
  out.scattered ? meta.SCATTERS++ : meta.NOSCATTERS++; //Accounting for later statistical use.
  return out;
}

fourvec Will::transform_to_lab(fourvec input){
  double px=input.x;
  double e = input.e;
  scipp_ilc::transform_to_lab(px,e,px,e);
  fourvec out(px,input.y,input.z,e);
  return out;
}

fourvec Will::transform_to_lab(MCParticle* input){
  return transform_to_lab(getFourVector(input));
}

int Will::get_hitStatus(fourvec input, bool lab){
  if(lab) input=transform_to_lab(input);
  return scipp_ilc::get_hitStatus(input.x, input.y, input.z);
}

int Will::get_hitStatus(MCParticle* input){
  const double* mom = input->getMomentum();
  double x=mom[0],y=mom[1],z=mom[2];
  int stat = scipp_ilc::get_hitStatus(x,y,z);
  return stat;
}

fourvec Will::getBeamcalPosition(const fourvec input, signed short dir){
  fourvec lab = transform_to_lab(input);
  fourvec pos;
  //Positron moves in -z direction
  double direction = lab.z / abs(lab.z);
  
  if(dir!=direction){
    //figure out why
    meta.err_direction++;
    //cout << "should:is  " << dir << ":" << direction << endl;
    //cout << getTMag(input) << " : " << input.z<< endl;
    
    //cout << "^^^^ ^^^^" << endl;
    direction = dir;
  }
  else direction = dir;
  direction=dir;
  pos.z = META::BEAMCAL * direction;
  pos.x = lab.x * pos.z / lab.z + pos.z * .007 * (-direction);
  pos.y = lab.y * pos.z / lab.z;
  return pos;
}

void Will::print(string input){
  cout << input << endl;
}

void Will::print(string input, string input2){
  cout << input << " : " << input2 << endl;
}

META Will::getMETA(){return meta;}

void Will::getJane(LCCollection* col){
    //vector<MyParticle*> particles;
    vector<MCParticle*> final_system;
    vector<MCParticle*> had;
    int stat, id =0;
    bool scatter;

    double compEn_e=0;
    double compEn_p=0;

    double mom[4];
    double real_e[4];
    double real_p[4];
    double pred_e[4];
    double pred_p[4];

    double eT, pT, mag=0;
    double hadronic[] = {0, 0, 0, 0};
    double electronic[] = {0, 0, 0, 0};

    int real, pred;

    srand(time(NULL));
    // this will only be entered if the collection is available
    if( col != NULL ){
        int nElements = col->getNumberOfElements()  ;

        scatter = false;

//****************************************************INITIAL*****PASS******************************************************************************
        for(int hitIndex = 0; hitIndex < nElements ; hitIndex++){
            MCParticle* particle = dynamic_cast<MCParticle*>( col->getElementAt(hitIndex) );

            id = particle->getPDG();
            stat = particle->getGeneratorStatus();

            if(stat==1){
                //push all final state particles to separate vector
                final_system.push_back(particle); 
                if(id==11){
                    if(particle->getEnergy() > compEn_e){compEn_e=particle->getEnergy();}    
                }
                else if(id==-11){
                    if(particle->getEnergy() > compEn_p){compEn_p=particle->getEnergy();}    
                }
            }//end final state   
        }//end for

//****************************************************SECOND*****PASS******************************************************************************
        for(MCParticle* particle : final_system){
            id = particle->getPDG();

            //BEAM ELECTRON
            if(particle->getEnergy()==compEn_e){
                real_e[0]=particle->getMomentum()[0];    
                real_e[1]=particle->getMomentum()[1];    
                real_e[2]=particle->getMomentum()[2];
                real_e[3]=particle->getEnergy();
                eT = sqrt(pow(real_e[0], 2)+pow(real_e[1], 2));
                
                //if deflected, add to electronic
                if(abs(real_e[0])!=0||abs(real_e[1])!=0){
                    scatter = true;
                    electronic[0]+=real_e[0];    
                    electronic[1]+=real_e[1];    
                    electronic[2]+=real_e[2];    
                    electronic[3]+=real_e[3];    
                }
            }
                
            //BEAM POSITRON
            else if(particle->getEnergy()==compEn_p){
                real_p[0]=particle->getMomentum()[0];    
                real_p[1]=particle->getMomentum()[1];    
                real_p[2]=particle->getMomentum()[2];
                real_p[3]=particle->getEnergy();
                pT = sqrt(pow(real_p[0], 2)+pow(real_p[1], 2));
                
                //if deflected, add to electronic
                if(abs(real_p[0])!=0||abs(real_p[1])!=0){
                    scatter = true;
                    electronic[0]+=real_p[0];    
                    electronic[1]+=real_p[1];    
                    electronic[2]+=real_p[2];    
                    electronic[3]+=real_p[3];    
                }    
            }

            //HADRONIC SYSTEM
            else{
                had.push_back(particle);
                mom[0]=particle->getMomentum()[0];    
                mom[1]=particle->getMomentum()[1];    
                mom[2]=particle->getMomentum()[2];
                mom[3]=particle->getEnergy();

                double tmag = sqrt(pow(mom[0], 2)+pow(mom[1], 2));
                mag+=tmag;
                
                //scipp_ilc::transform_to_lab(mom[0], mom[3], mom[0], mom[3]);
                hadronic[0]+=mom[0];    
                hadronic[1]+=mom[1];    
                hadronic[2]+=mom[2];    
                hadronic[3]+=mom[3];    
            }//end hadronic system    
        }//end for

        if(scatter==true){
       
	  //create balancing particle
            double x = hadronic[0] + electronic[0];
            double y = hadronic[1] + electronic[1];

            double pseudo_x = -x;
            double pseudo_y = -y;

            double p_mag = sqrt(pow(pseudo_x, 2)+pow(pseudo_y, 2));
            mag+=p_mag;

            hadronic[0]=0;
            hadronic[1]=0;

            //refill hadronic system with cuts and balancing particle
            for(MCParticle* particle : had){
                mom[0]=particle->getMomentum()[0];    
                mom[1]=particle->getMomentum()[1];    
                mom[2]=particle->getMomentum()[2];
                mom[3]=particle->getEnergy();

                double hyp = sqrt(pow(mom[0], 2)+pow(mom[1], 2)+pow(mom[2], 2));
                double cos = mom[2]/hyp;
                if(true){
                    //scipp_ilc::transform_to_lab(mom[0], mom[3], mom[0], mom[3]);
                    hadronic[0]+=mom[0];    
                    hadronic[1]+=mom[1];    
                    hadronic[2]+=mom[2];    
                    hadronic[3]+=mom[3];    
                }
            }

            //add balancing particle to hadronic system
            hadronic[0]+=pseudo_x;
            hadronic[1]+=pseudo_y;
	    
            //cut on S
            if(mag>1.0){
                
                meta.total++;
                //create prediction vectors
                pred_e[0] = -hadronic[0];
                pred_e[1] = -hadronic[1];
                pred_p[0] = -hadronic[0];
                pred_p[1] = -hadronic[1];

                double alpha = 500 - hadronic[3] - hadronic[2];
                double beta = 500 - hadronic[3] + hadronic[2];
                

                pred_e[2] = -(pow(eT, 2)-pow(alpha, 2))/(2*alpha);
                pred_e[3] = 500 - hadronic[3] - pred_e[2] - hadronic[2];
                pred_p[2] = (pow(pT, 2)-pow(beta, 2))/(2*beta);
                pred_p[3] = 500 - hadronic[3] + pred_p[2] + hadronic[2];
               
                //Lorentz transform - frome center of mass to lab frame 
                scipp_ilc::transform_to_lab(real_e[0], real_e[3], real_e[0], real_e[3]);
                scipp_ilc::transform_to_lab(real_p[0], real_p[3], real_p[0], real_p[3]);
                scipp_ilc::transform_to_lab(pred_e[0], pred_e[3], pred_e[0], pred_e[3]);
                scipp_ilc::transform_to_lab(pred_p[0], pred_p[3], pred_p[0], pred_p[3]);
               
                //create position vector
                double real_e_pos[3];
                double real_p_pos[3];
                double pred_e_pos[3];
                double pred_p_pos[3];



                //set z-positions as beamcal face
                real_e_pos[2] = 3265;
                real_p_pos[2] = -3265;
                pred_e_pos[2] = 3265;
                pred_p_pos[2] = -3265;

                //extrapolate transverse positions from mom vector
                real_e_pos[0] = real_e[0]*real_e_pos[2]/real_e[2];
                real_e_pos[1] = real_e[1]*real_e_pos[2]/real_e[2];
                real_p_pos[0] = real_p[0]*real_p_pos[2]/real_p[2];
                real_p_pos[1] = real_p[1]*real_p_pos[2]/real_p[2];
                
                pred_e_pos[0] = pred_e[0]*pred_e_pos[2]/pred_e[2];
                pred_e_pos[1] = pred_e[1]*pred_e_pos[2]/pred_e[2];
                pred_p_pos[0] = pred_p[0]*pred_p_pos[2]/pred_p[2];
                pred_p_pos[1] = pred_p[1]*pred_p_pos[2]/pred_p[2];
           
                 
                //transform to BeamCal frame
                real_e_pos[0] = real_e_pos[0] - real_e_pos[2]*0.007;
                real_p_pos[0] = real_p_pos[0] + real_p_pos[2]*0.007;
                pred_e_pos[0] = pred_e_pos[0] - pred_e_pos[2]*0.007;
                pred_p_pos[0] = pred_p_pos[0] + pred_p_pos[2]*0.007;
                
		meta.pred_e=fourvec(pred_e_pos[0], pred_e_pos[1], pred_e_pos[2]);
		meta.real_e=fourvec(real_e_pos[0], real_e_pos[1], real_e_pos[2]);
		meta.real_p=fourvec(real_p_pos[0], real_p_pos[1], real_p_pos[2]);
		meta.pred_p=fourvec(pred_p_pos[0], pred_p_pos[1], pred_p_pos[2]);

                //get hit status
                int re_hit = scipp_ilc::get_hitStatus(real_e_pos[0], real_e_pos[1], real_e_pos[2]);
                int rp_hit = scipp_ilc::get_hitStatus(real_p_pos[0], real_p_pos[1], real_p_pos[2]);
                int pe_hit = scipp_ilc::get_hitStatus(pred_e_pos[0], pred_e_pos[1], pred_e_pos[2]);
                int pp_hit = scipp_ilc::get_hitStatus(pred_p_pos[0], pred_p_pos[1], pred_p_pos[2]);

               /* 
                //eWpB 
                if(re_hit!=3 && re_hit!=4){real = 1;}
                else{real = 2;}
                if(pe_hit!=3 && pe_hit!=4){pred = 1;}
                else{pred = 2;}

                if(pred == 1 && real == 1){hh++;}
                else if(pred == 1 && real == 2){hm++;}
                else if(pred == 2 && real == 1){mh++;}
                else if(pred == 2 && real == 2){mm++;}
                


                cout << "PRED ELECTRON: " << pred_e_pos[0] << " " << pred_e_pos[1] << " " << pred_e_pos[2] << endl;
             
             */
                //eBpW 
                if(rp_hit!=3 && rp_hit!=4){real = 1;}
                else{real = 2;}
                if(pp_hit!=3 && pp_hit!=4){pred = 1;}
                else{pred = 2;}

                if(pred == 1 && real == 1){meta.hh++;}
                else if(pred == 1 && real == 2){meta.hm++;}
                else if(pred == 2 && real == 1){meta.mh++;}
                else if(pred ==2 && real == 2){meta.mm++;}

                real = 0;
                pred = 0;
            }


        }//end if scatter
    }//end collection
}
