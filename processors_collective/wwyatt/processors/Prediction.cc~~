#undef _GLIBCXX_USE_CXX11_ABI
#define _GLIBCXX_USE_CXX11_ABI 0
/* 
 * Ok, so I like C++11. Unfortunately,
 * Marlin is built with ansi C, so the processor
 * constructor freaks out about the string that is
 * passed to it as an argument. The above two lines
 * fix that issue, allowing our code to be compatible
 * with ansi C class declarations.
 * Big thanks to Daniel Bittman for helping me fix this.
 */

/*
 * author Christopher Milke
 * April 5, 2016
 */

#include "Prediction.h"
#include "scipp_ilc_utilities.h"
#include <iostream>
#include <iomanip> 

#include <EVENT/LCCollection.h>
#include <EVENT/SimCalorimeterHit.h>
#include <EVENT/MCParticle.h>

#include <TFile.h>
#include <TH2D.h>
#include <MyParticle.h>
#include <Will.h>

// ----- include for verbosity dependend logging ---------
#include "marlin/VerbosityLevels.h"



using namespace lcio;
using namespace marlin;
using namespace std;
using namespace Will;

Prediction Prediction;


static TFile* _rootfile;
static TH2F* _prediction;
static TH1F* _vector;
static TH1F* _p_theta;
static TH1F* _e_theta;
static TH1F* zmom;
static TH1F* tmom;
static TH1F* amom;
static TH1F* bmom;
static TH1F* cmom;

static vector<fourvec> actual;
static vector<fourvec> predicted;
static vector<double> spread_e;
static vector<double> spread_p;
static vector<pair<double,double>> spread;

static int p_scatter=0;
static int e_scatter=0;
static int ph_th = 0;
static int ph_tm = 0;
static int pm_th = 0;
static int pm_tm = 0;
static int total = 0;
static double acc = 0.0;
static int _acc=0;
Prediction::Prediction() : Processor("Prediction") {
  // modify processor description
  _description = "Protype Processor" ;

  // register steering parameters: name, description, class-variable, default value
  registerInputCollection( LCIO::MCPARTICLE, "CollectionName" , "Name of the MCParticle collection"  , _colName , std::string("MCParticle") );

  registerProcessorParameter( "RootOutputName" , "output file"  , _root_file_name , std::string("output.root") );
}



void Prediction::init() { 
  streamlog_out(DEBUG) << "   init called  " << std::endl ;

  _rootfile = new TFile("ppredict.root","RECREATE");
  //usually a good idea to
  //printParameters() ;
  _prediction = new TH2F("predict", "Predicted Angle of Scatter, Correct vs Incorrect Kinematics", 1000, 0.0, 0.01, 1000, 0.0, 0.01);
  _p_theta = new TH1F("p_theta", "Theta between positron and hadronic system", 360, 0, .1);
  _e_theta = new TH1F("e_theta", "Theta between positron and hadronic system", 360, 0, .1);
  _vector = new TH1F("vector", "Vector", 200, 0.0, 0.05);
  zmom=new TH1F("zmom", "Hadronic system energy", 300, 490, 500);
  tmom=new TH1F("tmom", "Theta Distribution", 500, 0, .006);  
  amom=new TH1F("amom", "Distribution of Deltatheta", 500, 0,.006);
  bmom=new TH1F("bmom", "Distribution of Deltatheta", 500, 0,.001);
  cmom=new TH1F("cmom", "Distribution of Deltatheta", 500, 0,.0002);
  _nEvt = 0 ;
}



void Prediction::processRunHeader( LCRunHeader* run) { 
  //    _nRun++ ;
} 

void Prediction::processEvent( LCEvent * evt ) { 
  // DISCLAIMER: THERE IS MORE DOCUMENTATION IN THE HEADER FILE (Will.h).
  LCCollection* col = evt->getCollection( _colName ) ;
  if( col == NULL )return;
  //Run janes code for comparison.
  //getJane(col);

  Will::measure data = Will::getMeasure(col);  
  /* "getMeasure(LCCollection)" Takes the collection, calculates the hadronic system.
   * A measure is a struct with several fourvectors in it:
   * - electron - Highest energy final state electron
   * - positron - Highest energy final state positron
   * - hadronic - Calculated from all non final state high energy electron/positron
   * - electronic
   *   |=> Either the electron or the positron above WITH transverse momentum (e.g. scatter)
   *   |=> Transverse momentum means this is the particle that scattered.
   */



  if(!data.scattered || data.mag<=1) return;//If there was no scatter, then there is nothing to see.
  prediction p(data); //Store prediction vector as variable 'p';
  /* "prediction" will calculate and return two prediction vectors.
   * - electron 
   * - positron
   * Only one of these will be correct; that can be checked by measure.p_scatter and measure.e_scatter.
   * I will make it easier to get the correct prediction.
   */
  //I rename the particles just for ease of use. I might take this out later for explicitness.
  fourvec electron=data.electron,
    positron=data.positron,
    hadronic=data.hadronic,
    electronic=data.electronic;
  //fourvec nelectron = fourvec(-data.electronic.x,-data.electronic.y,data.electronic.z,data.electronic.e);
  //data.hadronic=nelectron;
  double mag=data.mag; //Magnitude of the hadronic vector?
  double electronTheta=getTheta(p.electron); //Angle off of z-axis
  double positronTheta=getTheta(p.positron);

  if(mag>1.0) _prediction->Fill(electronTheta,positronTheta);//Idk what this is.

  //Plotting angles.
  double p_mag = getMag(electronic);
  double e_theta=getTheta(electron,p.electron);
  double p_theta=getTheta(positron,p.positron);
  //cout << acc << ":" << e_theta << ":" << p_theta<< endl;
  //Energy cut for testing efficiency
  double ENERGY=data.positron.e+data.electron.e;

  //Apply energy cuts here to make a HM grid
  if(ENERGY<375)return;
  if(data.p_scatter){
    acc+=p_theta;
    spread.push_back(pair<double,double>(ENERGY,p_theta));
    
    ++_acc;
  }else if(data.e_scatter){
    acc+=e_theta;
    spread.push_back(pair<double,double>(ENERGY,e_theta));
    ++_acc;
  }
  _p_theta->Fill(e_theta);
  _e_theta->Fill(p_theta);

  //Create position vectors
  fourvec real_e = getBeamcalPosition(data.electron,  1);
  fourvec pred_p = getBeamcalPosition(p.positron, -1);
  fourvec real_p = getBeamcalPosition(data.positron, -1);
  fourvec pred_e = getBeamcalPosition(p.electron,  1);

  //The following is a for a hit miss table to test efficiancy.
  //These booleans are true if the particle had hit.
  bool actual_electron=get_hitStatus(real_e)<3;
  bool actual_positron=get_hitStatus(real_p)<3;
  bool predicted_electron=get_hitStatus(pred_e)<3;
  bool predicted_positron=get_hitStatus(pred_p)<3;
  ++total;
  if(data.p_scatter){
    if(actual_positron&&predicted_positron)ph_th++;
    else if( actual_positron && !predicted_positron)pm_th++;
    else if(!actual_positron &&  predicted_positron)ph_tm++;
    else if(!actual_positron && !predicted_positron)pm_tm++;
    p_scatter++;
  }else if(data.e_scatter){
    if(actual_electron&&predicted_electron)ph_th++;
    else if( actual_electron && !predicted_electron)pm_th++;
    else if(!actual_electron &&  predicted_electron)ph_tm++;
    else if(!actual_electron && !predicted_electron)pm_tm++;	
    e_scatter++;
  }else{
    cout << "ERROR 42: Particle broke god." << endl;
  }
  
}

void Prediction::check( LCEvent * evt ) { 
  // nothing to check here - could be used to fill checkplots in reconstruction processor
}



void Prediction::end(){ 
  Will::META meta = Will::getMETA();
  cout << "Predicted Z-Direction Errors:" << meta.err_direction << endl;
  cout << "Scatter Ratios:"<<endl;
  cout << "(positrons:electrons)\t= " << p_scatter << ":"<<e_scatter<<endl;
  cout << "(scattered:not-scattered)\t= " << meta.SCATTERS << ":" << meta.NOSCATTERS << endl;
  int sum = ph_th+ph_tm+pm_th+pm_tm;
  double hh=1.0*ph_th/sum;
  double hm=1.0*ph_tm/sum;
  double mh=1.0*pm_th/sum;
  double mm=1.0*pm_tm/sum;
  cout << "          | Truth Hit | Truth Miss" << endl;
  cout << setprecision(4) << "Pred Hit  | " << hh << "   |  " << hm << endl;
  cout << setprecision(4) << "Pred Miss | " << mh << "   |  " << mm << endl;
  cout << "TOTAL Final Events: " << total << endl; 
  cout << "Misc data: " << meta.MSC << endl;



  //Analyze spread.
  for(auto hit: spread){
    //The main plot we use is the theta districution (second)
    tmom->Fill(hit.second);
    if(abs(hit.first-500)<10){
      zmom->Fill(hit.first);
    }
  }
  for(int i=1; i < 10; ++i){
    //amom
    double CUT=500.0/(i*i);
    double eff=0.0;
    int _eff=0;
    if(i==2)cout << "cut on amom " << CUT << endl;
    if(i==5)cout << "cut on bmom " << CUT << endl;
    if(i==9)cout << "cut on cmom " << CUT << endl;
    for(auto hit: spread){
      if(abs(hit.first-500) < CUT){
	eff+=hit.second;
	++_eff;
	if(i==2) amom->Fill(hit.second);
	else if(i==5) bmom->Fill(hit.second);
	else if(i==9) cmom->Fill(hit.second);
      }
    }
    cout << "CUT [" << 500.0-CUT << ", "<< CUT+500.0<< "]: " << eff/_eff <<endl;
    
    //amom->Fill(eff/_eff);
  }
  //Efficency
  cout << "Angle Efficiency:" << acc/_acc << " (" << acc/_acc*180/3.14159265 << "deg)"<< endl;
  _rootfile->Write();
}
